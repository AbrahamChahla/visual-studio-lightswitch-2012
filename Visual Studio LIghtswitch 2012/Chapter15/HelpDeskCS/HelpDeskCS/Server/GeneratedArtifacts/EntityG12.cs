

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class IssueFeedback : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the IssueFeedback entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IssueFeedback()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IssueFeedback(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.IssueFeedback> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.IssueFeedback.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueFeedback_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueFeedback_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Id
        {
            get
            {
                return global::LightSwitchApplication.IssueFeedback.DetailsClass.GetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Id);
            }
            set
            {
                global::LightSwitchApplication.IssueFeedback.DetailsClass.SetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Id, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public byte[] RowVersion
        {
            get
            {
                return global::LightSwitchApplication.IssueFeedback.DetailsClass.GetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.RowVersion);
            }
            set
            {
                global::LightSwitchApplication.IssueFeedback.DetailsClass.SetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.RowVersion, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RowVersion_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int QualityRating
        {
            get
            {
                return global::LightSwitchApplication.IssueFeedback.DetailsClass.GetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.QualityRating);
            }
            set
            {
                global::LightSwitchApplication.IssueFeedback.DetailsClass.SetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.QualityRating, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void QualityRating_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void QualityRating_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void QualityRating_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ResponseRating
        {
            get
            {
                return global::LightSwitchApplication.IssueFeedback.DetailsClass.GetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.ResponseRating);
            }
            set
            {
                global::LightSwitchApplication.IssueFeedback.DetailsClass.SetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.ResponseRating, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ResponseRating_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ResponseRating_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ResponseRating_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int StaffRating
        {
            get
            {
                return global::LightSwitchApplication.IssueFeedback.DetailsClass.GetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.StaffRating);
            }
            set
            {
                global::LightSwitchApplication.IssueFeedback.DetailsClass.SetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.StaffRating, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StaffRating_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StaffRating_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StaffRating_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Comment
        {
            get
            {
                return global::LightSwitchApplication.IssueFeedback.DetailsClass.GetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Comment);
            }
            set
            {
                global::LightSwitchApplication.IssueFeedback.DetailsClass.SetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Comment, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Comment_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Comment_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Comment_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double OverallRating
        {
            get
            {
                return global::LightSwitchApplication.IssueFeedback.DetailsClass.GetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.OverallRating);
            }
            set
            {
                global::LightSwitchApplication.IssueFeedback.DetailsClass.SetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.OverallRating, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OverallRating_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OverallRating_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OverallRating_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Issue Issue
        {
            get
            {
                return global::LightSwitchApplication.IssueFeedback.DetailsClass.GetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Issue);
            }
            set
            {
                global::LightSwitchApplication.IssueFeedback.DetailsClass.SetValue(this, global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Issue, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issue_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issue_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issue_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.IssueFeedback,
                global::LightSwitchApplication.IssueFeedback.DetailsClass,
                global::LightSwitchApplication.IssueFeedback.DetailsClass.IImplementation,
                global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Id;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass>.Entry
                __IssueFeedbackEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass>.Entry(
                    global::LightSwitchApplication.IssueFeedback.DetailsClass.__IssueFeedback_CreateNew,
                    global::LightSwitchApplication.IssueFeedback.DetailsClass.__IssueFeedback_Created,
                    global::LightSwitchApplication.IssueFeedback.DetailsClass.__IssueFeedback_AllowSaveWithErrors);
            private static global::LightSwitchApplication.IssueFeedback __IssueFeedback_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.IssueFeedback> es)
            {
                return new global::LightSwitchApplication.IssueFeedback(es);
            }
            private static void __IssueFeedback_Created(global::LightSwitchApplication.IssueFeedback e)
            {
                e.IssueFeedback_Created();
            }
            private static bool __IssueFeedback_AllowSaveWithErrors(global::LightSwitchApplication.IssueFeedback e)
            {
                bool result = false;
                e.IssueFeedback_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int> Id
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Id) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, byte[]> RowVersion
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.RowVersion) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, byte[]>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int> QualityRating
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.QualityRating) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int> ResponseRating
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.ResponseRating) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int> StaffRating
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.StaffRating) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, string> Comment
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Comment) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, double> OverallRating
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.OverallRating) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, global::LightSwitchApplication.Issue> Issue
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Issue) as global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, global::LightSwitchApplication.Issue>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int Id { get; set; }
                new byte[] RowVersion { get; set; }
                new int QualityRating { get; set; }
                new int ResponseRating { get; set; }
                new int StaffRating { get; set; }
                new string Comment { get; set; }
                new double OverallRating { get; set; }
                new global::Microsoft.LightSwitch.Internal.IEntityImplementation Issue { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Entry
                    Id = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Entry(
                        "Id",
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Id_Stub,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Id_ComputeIsReadOnly,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Id_Validate,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Id_GetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Id_SetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Id_OnValueChanged);
                private static void _Id_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.IssueFeedback.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Data> c, global::LightSwitchApplication.IssueFeedback.DetailsClass d, object sf)
                {
                    c(d, ref d._Id, sf);
                }
                private static bool _Id_ComputeIsReadOnly(global::LightSwitchApplication.IssueFeedback e)
                {
                    bool result = false;
                    e.Id_IsReadOnly(ref result);
                    return result;
                }
                private static void _Id_Validate(global::LightSwitchApplication.IssueFeedback e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Id_Validate(r);
                }
                private static int _Id_GetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d)
                {
                    return d.ImplementationEntity.Id;
                }
                private static void _Id_SetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d, int v)
                {
                    d.ImplementationEntity.Id = v;
                }
                private static void _Id_OnValueChanged(global::LightSwitchApplication.IssueFeedback e)
                {
                    e.Id_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, byte[]>.Entry
                    RowVersion = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, byte[]>.Entry(
                        "RowVersion",
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._RowVersion_Stub,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._RowVersion_ComputeIsReadOnly,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._RowVersion_Validate,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._RowVersion_GetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._RowVersion_SetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._RowVersion_OnValueChanged);
                private static void _RowVersion_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.IssueFeedback.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, byte[]>.Data> c, global::LightSwitchApplication.IssueFeedback.DetailsClass d, object sf)
                {
                    c(d, ref d._RowVersion, sf);
                }
                private static bool _RowVersion_ComputeIsReadOnly(global::LightSwitchApplication.IssueFeedback e)
                {
                    bool result = false;
                    e.RowVersion_IsReadOnly(ref result);
                    return result;
                }
                private static void _RowVersion_Validate(global::LightSwitchApplication.IssueFeedback e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.RowVersion_Validate(r);
                }
                private static byte[] _RowVersion_GetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d)
                {
                    return d.ImplementationEntity.RowVersion;
                }
                private static void _RowVersion_SetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d, byte[] v)
                {
                    d.ImplementationEntity.RowVersion = v;
                }
                private static void _RowVersion_OnValueChanged(global::LightSwitchApplication.IssueFeedback e)
                {
                    e.RowVersion_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Entry
                    QualityRating = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Entry(
                        "QualityRating",
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._QualityRating_Stub,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._QualityRating_ComputeIsReadOnly,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._QualityRating_Validate,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._QualityRating_GetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._QualityRating_SetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._QualityRating_OnValueChanged);
                private static void _QualityRating_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.IssueFeedback.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Data> c, global::LightSwitchApplication.IssueFeedback.DetailsClass d, object sf)
                {
                    c(d, ref d._QualityRating, sf);
                }
                private static bool _QualityRating_ComputeIsReadOnly(global::LightSwitchApplication.IssueFeedback e)
                {
                    bool result = false;
                    e.QualityRating_IsReadOnly(ref result);
                    return result;
                }
                private static void _QualityRating_Validate(global::LightSwitchApplication.IssueFeedback e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.QualityRating_Validate(r);
                }
                private static int _QualityRating_GetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d)
                {
                    return d.ImplementationEntity.QualityRating;
                }
                private static void _QualityRating_SetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d, int v)
                {
                    d.ImplementationEntity.QualityRating = v;
                }
                private static void _QualityRating_OnValueChanged(global::LightSwitchApplication.IssueFeedback e)
                {
                    e.QualityRating_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Entry
                    ResponseRating = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Entry(
                        "ResponseRating",
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._ResponseRating_Stub,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._ResponseRating_ComputeIsReadOnly,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._ResponseRating_Validate,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._ResponseRating_GetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._ResponseRating_SetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._ResponseRating_OnValueChanged);
                private static void _ResponseRating_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.IssueFeedback.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Data> c, global::LightSwitchApplication.IssueFeedback.DetailsClass d, object sf)
                {
                    c(d, ref d._ResponseRating, sf);
                }
                private static bool _ResponseRating_ComputeIsReadOnly(global::LightSwitchApplication.IssueFeedback e)
                {
                    bool result = false;
                    e.ResponseRating_IsReadOnly(ref result);
                    return result;
                }
                private static void _ResponseRating_Validate(global::LightSwitchApplication.IssueFeedback e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ResponseRating_Validate(r);
                }
                private static int _ResponseRating_GetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d)
                {
                    return d.ImplementationEntity.ResponseRating;
                }
                private static void _ResponseRating_SetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d, int v)
                {
                    d.ImplementationEntity.ResponseRating = v;
                }
                private static void _ResponseRating_OnValueChanged(global::LightSwitchApplication.IssueFeedback e)
                {
                    e.ResponseRating_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Entry
                    StaffRating = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Entry(
                        "StaffRating",
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._StaffRating_Stub,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._StaffRating_ComputeIsReadOnly,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._StaffRating_Validate,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._StaffRating_GetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._StaffRating_SetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._StaffRating_OnValueChanged);
                private static void _StaffRating_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.IssueFeedback.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Data> c, global::LightSwitchApplication.IssueFeedback.DetailsClass d, object sf)
                {
                    c(d, ref d._StaffRating, sf);
                }
                private static bool _StaffRating_ComputeIsReadOnly(global::LightSwitchApplication.IssueFeedback e)
                {
                    bool result = false;
                    e.StaffRating_IsReadOnly(ref result);
                    return result;
                }
                private static void _StaffRating_Validate(global::LightSwitchApplication.IssueFeedback e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.StaffRating_Validate(r);
                }
                private static int _StaffRating_GetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d)
                {
                    return d.ImplementationEntity.StaffRating;
                }
                private static void _StaffRating_SetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d, int v)
                {
                    d.ImplementationEntity.StaffRating = v;
                }
                private static void _StaffRating_OnValueChanged(global::LightSwitchApplication.IssueFeedback e)
                {
                    e.StaffRating_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, string>.Entry
                    Comment = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, string>.Entry(
                        "Comment",
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Comment_Stub,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Comment_ComputeIsReadOnly,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Comment_Validate,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Comment_GetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Comment_SetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Comment_OnValueChanged);
                private static void _Comment_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.IssueFeedback.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, string>.Data> c, global::LightSwitchApplication.IssueFeedback.DetailsClass d, object sf)
                {
                    c(d, ref d._Comment, sf);
                }
                private static bool _Comment_ComputeIsReadOnly(global::LightSwitchApplication.IssueFeedback e)
                {
                    bool result = false;
                    e.Comment_IsReadOnly(ref result);
                    return result;
                }
                private static void _Comment_Validate(global::LightSwitchApplication.IssueFeedback e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Comment_Validate(r);
                }
                private static string _Comment_GetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d)
                {
                    return d.ImplementationEntity.Comment;
                }
                private static void _Comment_SetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Comment = v;
                }
                private static void _Comment_OnValueChanged(global::LightSwitchApplication.IssueFeedback e)
                {
                    e.Comment_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, double>.Entry
                    OverallRating = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, double>.Entry(
                        "OverallRating",
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._OverallRating_Stub,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._OverallRating_ComputeIsReadOnly,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._OverallRating_Validate,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._OverallRating_GetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._OverallRating_SetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._OverallRating_OnValueChanged);
                private static void _OverallRating_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.IssueFeedback.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, double>.Data> c, global::LightSwitchApplication.IssueFeedback.DetailsClass d, object sf)
                {
                    c(d, ref d._OverallRating, sf);
                }
                private static bool _OverallRating_ComputeIsReadOnly(global::LightSwitchApplication.IssueFeedback e)
                {
                    bool result = false;
                    e.OverallRating_IsReadOnly(ref result);
                    return result;
                }
                private static void _OverallRating_Validate(global::LightSwitchApplication.IssueFeedback e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.OverallRating_Validate(r);
                }
                private static double _OverallRating_GetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d)
                {
                    return d.ImplementationEntity.OverallRating;
                }
                private static void _OverallRating_SetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d, double v)
                {
                    d.ImplementationEntity.OverallRating = v;
                }
                private static void _OverallRating_OnValueChanged(global::LightSwitchApplication.IssueFeedback e)
                {
                    e.OverallRating_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, global::LightSwitchApplication.Issue>.Entry
                    Issue = new global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, global::LightSwitchApplication.Issue>.Entry(
                        "Issue",
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Issue_Stub,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Issue_ComputeIsReadOnly,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Issue_Validate,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Issue_GetCoreImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Issue_GetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Issue_SetImplementationValue,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Issue_Refresh,
                        global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties._Issue_OnValueChanged);
                private static void _Issue_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.IssueFeedback.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, global::LightSwitchApplication.Issue>.Data> c, global::LightSwitchApplication.IssueFeedback.DetailsClass d, object sf)
                {
                    c(d, ref d._Issue, sf);
                }
                private static bool _Issue_ComputeIsReadOnly(global::LightSwitchApplication.IssueFeedback e)
                {
                    bool result = false;
                    e.Issue_IsReadOnly(ref result);
                    return result;
                }
                private static void _Issue_Validate(global::LightSwitchApplication.IssueFeedback e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Issue_Validate(r);
                }
                private static global::Microsoft.LightSwitch.Internal.IEntityImplementation _Issue_GetCoreImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d)
                {
                    return d.ImplementationEntity.Issue;
                }
                private static global::LightSwitchApplication.Issue _Issue_GetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d)
                {
                    return d.GetImplementationValue<global::LightSwitchApplication.Issue, global::LightSwitchApplication.Issue.DetailsClass>(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Issue, ref d._Issue);
                }
                private static void _Issue_SetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass d, global::LightSwitchApplication.Issue v)
                {
                    d.SetImplementationValue(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Issue, ref d._Issue, (i, ev) => i.Issue = ev, v);
                }
                private static void _Issue_Refresh(global::LightSwitchApplication.IssueFeedback.DetailsClass d)
                {
                    d.RefreshNavigationProperty(global::LightSwitchApplication.IssueFeedback.DetailsClass.PropertySetProperties.Issue, ref d._Issue);
                }
                private static void _Issue_OnValueChanged(global::LightSwitchApplication.IssueFeedback e)
                {
                    e.Issue_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Data _Id;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, byte[]>.Data _RowVersion;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Data _QualityRating;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Data _ResponseRating;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, int>.Data _StaffRating;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, string>.Data _Comment;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, double>.Data _OverallRating;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityReferenceProperty<global::LightSwitchApplication.IssueFeedback, global::LightSwitchApplication.IssueFeedback.DetailsClass, global::LightSwitchApplication.Issue>.Data _Issue;
            
        }
    
        #endregion
    }
    
    #endregion
}
